generator client {
  provider = "prisma-client-js"
}
// postgresql://postgres:FgjEsNqsAqSJrrHcxFFmkqwYCPaWQJdh@autorack.proxy.rlwy.net:41108/railway
datasource db {
  provider = "postgresql" // 或者您使用的数据库类型
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  skills        Skill[]
  timerPresets  TimerPreset[]
  timerRecords  TimerRecord[]

  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Task {
  id              String   @id @default(cuid())
  title           String
  description     String?
  isDeleted       Boolean  @default(false)
  completed       Boolean  @default(false)
  pomodoroRatings Int[]   @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  skills          Skill[]  // 和Skill多对多关系
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dawn_tasks")
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  color       String
  tasks       Task[]   // 和Task的多对多关系
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model TimerPreset {
  id                String   @id @default(cuid())
  name              String
  pomodoroLength    Int      // in seconds
  shortBreakLength  Int      // in seconds
  longBreakLength   Int      // in seconds
  autoStartBreaks   Boolean  @default(false)
  autoStartPomodoros Boolean @default(false)
  longBreakInterval Int      @default(4)
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String   @map("user_id")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, isDefault], name: "one_default_per_user")

  @@map("timer_presets")
}

model TimerRecord {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  type        String   // "pomodoro" | "shortBreak" | "longBreak"
  duration    Int      // in minutes
  taskId      String?
  skillIds    String[]
  round       Int      @default(1)
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("timer_records")
}
